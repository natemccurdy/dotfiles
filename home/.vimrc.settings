"  AUTOGROUPS {{{

" Set the filetype based on the file's extension.
au BufRead,BufNewFile *.epp set filetype=embeddedpuppet

" Go to previous location when opening a file again.
augroup previous_location
  autocmd!
  autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
      \|     exe "normal! g`\""
      \|  endif
augroup end

" }}}
" COLORS {{{

" Enable syntax highlighting
syntax enable

"Set colorscheme
set background=dark
colorscheme gruvbox

"}}}
" PLUGIN OPTIONS {{{

" NOTE: inline lua heredocs break syntax highlighting for vimscript. Fix it by
" running the following from within vim:
"   !curl -sS https://raw.githubusercontent.com/neovim/neovim/v0.7.2/runtime/syntax/lua.vim > $VIMRUNTIME/syntax/lua.vim
" See: https://github.com/neovim/neovim/issues/20456

" https://github.com/nvim-lualine/lualine.nvim
lua << EOF
require('lualine').setup {
  options = {
    theme = 'gruvbox',
  },
  sections = {
    lualine_c = {
      -- https://github.com/nvim-lualine/lualine.nvim?tab=readme-ov-file#filename-component-options
      { 'filename', path = 1 }
    },
  },
  extensions = {
    'fugitive',
    'quickfix',
  }
}
EOF

" https://github.com/akinsho/bufferline.nvim
" :h bufferline-configuration
lua << EOF
require("bufferline").setup{
  options = {
    show_buffer_close_icons = false,
    separator_style = "slant",
  }
}
EOF

" https://github.com/nvim-treesitter/nvim-treesitter
lua << EOF
require('nvim-treesitter.configs').setup {
  -- Automatically install missing parsers when entering buffer.
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = true,
  -- Use treesitter highlighting.
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
}
EOF

" https://github.com/lewis6991/gitsigns.nvim
lua << EOF
require('gitsigns').setup {
  signs = {
    add = { text = '+' },
  },
}
EOF

" https://github.com/nvim-tree/nvim-tree.lua
" disable netrw to avoid conflicts
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
lua << EOF
require("nvim-tree").setup {
 view = {
   width = {}, -- Setting width to a table makes the size dynamic. :h nvim-tree.view.width
 },
 renderer = {
   icons = {
     git_placement = 'signcolumn', -- Default is 'before'
   },
 },
}
EOF

" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" vim-go
let g:go_template_autocreate = 0 " Disable auto-creation of template files

" ALE Options
let g:ale_completion_enabled = 1
let g:ale_go_golangci_lint_package = 1  " Run golangci-lint on the entire Go package
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 1
let g:ale_python_flake8_options = '--append-config $HOME/.config/flake8'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
" Disable inline diagnostics messages: https://github.com/dense-analysis/ale/issues/4439
let g:ale_virtualtext_cursor = 0
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
let g:ale_fixers = {
\     'puppet': [
\       'puppetlint',
\     ],
\     'ruby': [
\       'rubocop',
\     ],
\   }

" Semshi python
" https://github.com/numirias/semshi
let g:semshi#error_sign = v:false
"let g:semshi#simplify_markup = v:false

" vim-python
let g:python_highlight_all = 1

" https://github.com/CopilotC-Nvim/CopilotChat.nvim
lua << EOF
require("CopilotChat").setup {
  debug = true,
}
EOF

" }}}
" {{{ SPACES & TABS

set tabstop=4
set expandtab
set shiftwidth=2
set softtabstop=2

 " }}}
" UI CONFIG {{{

" Enable line numbers
set number

" Disable mouse
set mouse=

" Increase History
set history=100

" Minimum number of lines above and below cursor
set scrolloff=14

" Visual autocomplete for command menu
set wildmenu

" Redraw only when we ned to
set lazyredraw

" highlight matching brackets
set showmatch

" Hide buffers after they are abandoned. Also allows switching buffers without
" saving them first.
set hidden

" Highlights for various problems.
" Add to the autogroup below when creating more highlights.
highlight TrailingWhitespace ctermbg=White guibg=White
highlight LiteralTab ctermbg=Yellow guibg=Yellow
" https://stackoverflow.com/a/26209681
highlight NonASCII ctermbg=DarkRed guibg=DarkRed
" I can't add this to the autogroup because FZF's file window is drawn with
" special characters, so it's all red and looks terrible.
"          \ call matchadd('NonASCII', '[^\u0000-\u007F]')

fun! AddLiteralTabMatch()
    " Don't add it on these filetypes.
    if &ft =~ 'go\|cue'
        return
    endif
    call matchadd('LiteralTab', '\t')
endfun

augroup HighlightProblems
    autocmd!
    autocmd winEnter,BufEnter * call clearmatches() |
          \ call matchadd('TrailingWhitespace', '\s\+$') |
          \ call AddLiteralTabMatch()
augroup END

" Highlight search terms with orange.
highlight Search  ctermbg=235 ctermfg=166

" New vertical splits go to the right rather than the left
set splitright

" New horizontal splits go below the current buffer rather than above them
set splitbelow

" Always show the sign column
set signcolumn=yes

" Make the sign column transparent
highlight clear SignColumn

" }}}
" SEARCHING {{{

" Enable highlight search and highlight when searching
set hlsearch
set incsearch

" Ignore case when searching
set ignorecase
set smartcase

" Turn off search highlight with <leader><space>
noremap <leader><space> :nohlsearch<CR>

" Allow autocompletion of words with - in them
set iskeyword+=\-

" Highlight and search with * but don't move the cursor.
noremap * *``

" }}}
" FOLDING {{{

" enable folding
set foldenable

" Open up to 10 folds by default
set foldlevelstart=10

" Max nested folds
set foldnestmax=10

" space opens/closes folds
nnoremap <space> za


"}}}
" MOVEMENT {{{

" Set to allow you to backspace while back past insert mode
set backspace=2

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" }}}
" SHORTCUTS {{{

" Clear whitespace at end of line with '_$'
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Quote words and lines with \q', \q", \qd
:nnoremap <Leader>q" ciw""<Esc>P
:nnoremap <Leader>q' ciw''<Esc>P
:nnoremap <Leader>qd daW"=substitute(@@,"'\\\|\"","","g")<CR>P

" Wrap words in backticks with:  \q`
:nnoremap <Leader>q` ciw``<Esc>P

" ALE Shortcuts
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Fix Puppet-lint issues with :PuppetLintFix
command! PuppetLintFix execute ':w' | execute ':silent !puppet-lint -f %' | execute ':redraw!' | execute ':edit!'

" Fix Ruby/Rubocop issues with :RubocopFix
command! RubocopFix execute ':w' | execute ':silent !rubocop -a %' | execute ':redraw!' | execute ':edit!'

" Prettify YAML using Python's ruamel.yaml (requires pip install ruamel.yaml)
command! YAMLPretty execute '%!yaml_pretty.py'

" Fix Python issues using cblack (requires 'pip3 install cblack': https://github.com/pausan/cblack)
command! PythonFix execute ':w' | execute ':silent !black %' | execute ':redraw!' | execute ':edit!'

" Open file explorer with \` (backslash then backtick)
"noremap <silent> <Leader>` :Lexplore<CR>
noremap <silent> <Leader>` :NvimTreeToggle <CR>

" Open fzf's Files search with \f (backslash then f)
noremap <silent> <Leader>f :Files<CR>

" Open fzf's RipGrep search with \r (backslash then r)
noremap <silent> <Leader>r :Rg<CR>

" Close buffer without removing its window
command! Bd bp|bd #

" CDC = Change to Directory of Current file
" Useful for syntax checkers to use dotfiles relative to that file.
" https://vim.fandom.com/wiki/Set_working_directory_to_the_current_file
command! CDC cd %:p:h

" Copy and paste to/from the system's clipboard
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p
" }}}
" BACKUPS & HISTORY {{{

" Disable files that don't need to be created
set noswapfile
set nobackup
set nowritebackup

" Persistent Undo
if v:version >= 703
    set undofile
    set undodir=~/.vim/tmp,~/.tmp,~/tmp,~/var/tmp,/tmp
endif

" }}}
" FUNCTIONS {{{

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}
" VARIOUS REMAPS {{{

" Spelling / Typos
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q

" Switch buffers with Tab & Shift-Tab
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>

" }}}

" vim: ft=vim foldmethod=marker foldlevel=0
